apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: ""
    capabilities: Basic Install
    categories: AI/Machine Learning
    containerImage: controller:latest
    createdAt: "2022-06-30T00:00:00Z"
    description: Serverless Feature Engineering for Production
    repository: https://github.com/raptor-ml/raptor
    support: Raptor
  name: raptor.v0.0.0
  namespace: raptor-system
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - description: DataSource is the Schema for the DataSource API
      displayName: DataSource
      kind: DataSource
      name: datasources.k8s.raptor.ml
      resources:
      - kind: Deployment
        name: raptor-dsrc-<name>
        version: v1
      specDescriptors:
      - description: Config of the DataSource
        displayName: Config
        path: config
      - description: Configuration value from secret
        displayName: Secret Key Ref
        path: config[0].secretKeyRef
        x-descriptors:
        - urn:alm:descriptor:io.kubernetes:Secret
      - description: KeyFields are the fields that are used to identify the data source
          of a single data row.
        displayName: Key Fields
        path: keyFields
      - description: Kind of the DataSource
        displayName: Data Source Kind
        path: kind
      - description: Replicas defines the number of desired pods. This is a pointer
          to distinguish between explicit zero and not specified. Defaults to 1.
        displayName: Replicas
        path: replicas
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:podCount
      - description: "Resources defines the required resources for a single container(underlying
          implementation) of this DataSource. Notice that this is not applicable for
          every DataSource, but only for those who implement an External Runner. \n
          More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"
        displayName: Resources
        path: resources
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:resourceRequirements
      - description: Schema defines the schema of the data source.
        displayName: Schema
        path: schema
      - description: TimestampField is the field that is used to identify the timestamp
          of a single data row.
        displayName: Timestamp Field
        path: timestampField
      statusDescriptors:
      - description: Features includes a list of references for the Feature that uses
          this DataSource
        displayName: Features
        path: features
      - displayName: Replicas
        path: replicas
      version: v1alpha1
    - description: Feature is the Schema for the features API
      displayName: ML Feature
      kind: Feature
      name: features.k8s.raptor.ml
      resources:
      - kind: Deployment
        name: raptor-controller-core
        version: v1
      specDescriptors:
      - description: Builder defines a building-block to use to build the feature-value
        displayName: Builder
        path: builder
      - description: Aggr defines an aggregation on top of the underlying feature-value.
          Aggregations will be calculated on time-of-request. Users can specify here
          multiple functions to calculate the aggregation.
        displayName: Aggregations
        path: builder.aggr
      - description: Code defines a Python processing code to use to build the feature-value.
        displayName: Python Expression
        path: builder.code
      - description: Packages defines the list of python packages to install in the
          runtime virtualenv.
        displayName: Packages
        path: builder.packages
      - description: Runtime defines the runtime virtualenv to use for running the
          python computation.
        displayName: RuntimeManager
        path: builder.runtime
      - description: DataSource is a reference for the DataSource that this Feature
          is associated with
        displayName: Data Source
        path: dataSource
      - description: Name is unique within a namespace to reference a resource.
        displayName: Resource's Name
        path: dataSource.name
      - description: Namespace defines the space within which the resource name must
          be unique.
        displayName: Resource's Namespace
        path: dataSource.namespace
      - description: Freshness defines the age of a feature-value(time since the value
          has set) to consider as *fresh*. Fresh values doesn't require re-ingestion
        displayName: Freshness
        path: freshness
      - description: Keys defines the list of keys that are required to calculate
          the feature value.
        displayName: EncodedKeys
        path: keys
      - description: Primitive defines the type of the underlying feature-value that
          a Feature should respond with.
        displayName: Primitive Type
        path: primitive
      - description: Staleness defines the age of a feature-value(time since the value
          has set) to consider as *stale*. Stale values are not fit for usage, therefore
          will not be returned and will REQUIRE re-ingestion.
        displayName: Staleness
        path: staleness
      - description: Timeout defines the maximum ingestion time allowed to calculate
          the feature value.
        displayName: Timeout
        path: timeout
      statusDescriptors:
      - description: FQN is the Fully Qualified Name for the Feature
        displayName: FQN
        path: fqn
      version: v1alpha1
    - description: Model is the Schema for the models API
      displayName: ML Model
      kind: Model
      name: models.k8s.raptor.ml
      resources:
      - kind: Deployment
        name: raptor-controller-core
        version: v1
      specDescriptors:
      - description: Features is the list of feature FQNs that are enabled for a given
          feature set
        displayName: Features
        path: features
      - description: Freshness defines the age of a prediction-result(time since the
          value has set) to consider as *fresh*. Fresh values doesn't require re-ingestion
        displayName: Freshness
        path: freshness
      - description: KeyFeature is the feature FQN that is used to align the rest
          of the features with their timestamp. If this is unset, the first feature
          in the list will be used.
        displayName: Key Feature FQN
        path: keyFeature
      - description: Labels is a list of feature FQNs that are used to label the prediction
          result.
        displayName: Labels
        path: labels
      - description: ModelFramework is the framework used to train the model.
        displayName: Model Framework
        path: modelFramework
      - description: ModelFrameworkVersion is the version of the framework used to
          train the model.
        displayName: Model Framework Version
        path: modelFrameworkVersion
      - description: ModelServer is the server used to serve the model.
        displayName: Model Server
        path: modelServer
      - description: Staleness defines the age of a prediction-result(time since the
          value has set) to consider as *stale*. Stale values are not fit for usage,
          therefore will not be returned and will REQUIRE re-ingestion.
        displayName: Staleness
        path: staleness
      - description: StorageURI is the URI of the model storage.
        displayName: Storage URI
        path: storageURI
      - description: Timeout defines the maximum ingestion time allowed to calculate
          the prediction.
        displayName: Timeout
        path: timeout
      - description: TrainingCode defines the code used to train the model.
        displayName: Python Expression
        path: trainingCode
      statusDescriptors:
      - description: FQN is the Fully Qualified Name for the Model
        displayName: FQN
        path: fqn
      version: v1alpha1
  description: |
    # Serverless Feature Engineering for Production
    RaptorML is a serverless framework that allows data-scientists to deploy ML Features to production without the hassle of the engineering overhead.

    Data Scientists can *focus* on the business logic, and the Raptor Kubernetes Operator take care of the engineering overhead
    (like caching, authentication, scale, etc).

    For more information, please visit [Raptor's docs](https://raptor.ml).

    ## Prerequisites
    - Kubernetes v1.18+
    - Redis server - to store the production data
    - A supported historical storage provider - currently support Snowflake and AWS S3

    ## How to install Raptor:
    Please create a `Subscription` resource with the dependencies configured. I.e:
    ```yaml
    apiVersion: v1
    kind: Secret
    metadata:
      name: raptor-providers-creds
      namespace: raptor-system
    data:
      REDIS: "my-redis.default.svc.cluster.local"
      AWS_ACCESS_KEY: ""
      AWS_SECRET_KEY: ""
      SNOWFLAKE_URI: <user>:<pass>@<account-id>/<db>/<schema>?warehouse=<warehouse-name>
    ---
    apiVersion: operators.coreos.com/v1alpha1
    kind: Subscription
    metadata:
      name: raptor
    spec:
      package: raptor
      channel: alpha
      config:
        env:
          - name: HISTORICAL_WRITER_PROVIDER
            value: "snowflake"
        envFrom:
          - secretRef:
              name: raptor-providers-credentials
    ```

    >> Notice: the example above creates a `Secret` resource inside the `raptor-system` namespace. Make sure to create it if it doesn't exist.
  displayName: Raptor
  icon:
  - base64data: PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSI0NDYiIGhlaWdodD0iNDU2IiB4bWxuczp2PSJodHRwczovL3ZlY3RhLmlvL25hbm8iPjxkZWZzPjxsaW5lYXJHcmFkaWVudCB5Mj0iLjEzMyIgeDI9Ii41NzMiIHkxPSIxLjAxNSIgeDE9Ii4zOTgiIGlkPSJBIj48c3RvcCBzdG9wLWNvbG9yPSIjNmY0ZDlhIiBvZmZzZXQ9Ii4yMiIvPjxzdG9wIHN0b3AtY29sb3I9IiM5ZTQ2OTQiIG9mZnNldD0iLjk4Ii8+PC9saW5lYXJHcmFkaWVudD48bGluZWFyR3JhZGllbnQgeTI9Ii4xMTkiIHgyPSIxLjAzOSIgeTE9Ii43NDkiIHgxPSIuMjM1IiBpZD0iQiI+PHN0b3Agc3RvcC1jb2xvcj0iIzZmNGQ5YSIgb2Zmc2V0PSIwIi8+PHN0b3Agc3RvcC1jb2xvcj0iIzllNDY5NCIgb2Zmc2V0PSIuNjYiLz48L2xpbmVhckdyYWRpZW50PjwvZGVmcz48cGF0aCBmaWxsPSJ1cmwoI0EpIiBkPSJNMCAxNzQuMzkxczAgMzEuNDc4IDE0Ni4zNDQgMzEuNDc4YzU5Ljc1MyAwIDg1LjY5MiAzMC4xMSA4NS42OTIgNzkuMDc5IDAgMjguNTk0LTUuNjI5IDUzLjUyOC0zMC4yOSA2NC45NjUgMTUuMDEzIDguOTM3IDI0LjkyNSAyOC4yMzYgMjkuOTI4IDYwLjc2NGwyLjY2OCAxNi45NDJzNS4xMzMgMjguNDUxIDE1LjI1NSAyOC40NTFoLTUwLjc1NWMtOC41ODEgMC0xNS4xMTItMjguNDUxLTE1LjExMi0yOC40NTFsLTIuMDkzLTEzLjcyNWMtNS4zNjItMzIuNTI1LTE5LjkxOS00Ny4xNzktNDQuNTgzLTQ3LjE3OUg5NS41OTJ2ODkuMzU1SDQ1LjkwN2wuNjgzLTIxMC40NzRjMjIuMDY5IDEyLjA3OSA0OC45OTkgMTUuOTkxIDQ4Ljk5OSAxNS45OTF2NjYuMTYzaDQ0LjY3OWMzMy4yNDMgMCA0MS4zNzItMTcuNzg3IDQxLjM3Mi00Mi4wOTJzLTguMTI5LTM3LjI1OC00MS4zNzItMzcuMjU4SDk1LjU4OVMwIDIzMS41NzQgMCAxNzQuMzkxeiIvPjxwYXRoIGZpbGw9InVybCgjQikiIGQ9Ik0zMDUuODU2IDEwNS4xNjFjLTEuNTIxLjA5NC0xLjk2OC0xLjk0NC00LjIwNy0yLjgwNC0zLjQxNC0xLjMxMi03LjM4MiAxLjUxNi05LjM0NyAyLjgwNC0xMC4wNDMgNi41ODMtMTIuMDExIDMuMjk5LTE4Ljc1OCA4LjQ1NC0xMS4zMDEgOC42MzYtMTcuMDA2IDIzLjQ4NS0xOS4yMzIgMjcuMTI3LTEuNTQzIDIuNTI1LTQuMTE5LTMuNTg3LTcuMzQyLTEuOTMyLTIuNTczIDEuMzIyLTIuNjY1IDMuNDA5LTUuMTQgNS42MDgtMy45NTkgMy41MTUtOS43MzMgMi4wODctOS44MTUgMy4yNzItLjAzNC40OTIuODkuOTIzIDEuMzk3IDEuMTYgMy40MjcgMS42MDEgNi45Ni0uNDAxIDcuNDE4LjM3Ny4zMDQuNTEtLjgyIDIuMDMyLTIuOTU1IDMuNjQ1LTYuNDggNC45MDMtMTEuNTIgMi41NC0xNS4xNDQgNi42OTgtMS43NDkgMi4wMDUtLjgyOSAyLjg0NC0zLjQ0MSA2LjI3Ni0uOTgyIDEuMjkxLTMuODggMTAuODg4LTEwLjY2NiAxMy45MTYtNS4wMjQgMi4yNDItNi4yNDMgMjMuNTctNy4zIDIzLjgxNi02LjUwNyAxLjUyMi01LjU1IDEuOTAyLTEyLjQ1NS00LjM2Mi0zLjAxLTIuNzMxLTE2LjAzLTIuODAxLTIwLjMyMi0zLjI3OC0uNDc0LS4wNTEgMTcuMDc1LTE4Ljk5NSAxOC41OTctMjQuNyAyLjIxOC04LjMwOCAxMy42NDMtMTEuNjQgMTcuMTgyLTExLjg5MyAyLjUzNi0uMTgyLTEuNzE0LTUuMTk0LTEuNjM4LTUuNDQzIDEtMy4zMzMgNy40MjQtNS41MTEgMTAuOTMzLTYuNDggNy4zOTQtMi4wNDQgNy45MTYtNS4wMjcgMTUuNTktMTEuMzM3IDE0LjYyNy0xMi4wMzIgMjYuOTI3LTE0LjU3NSAzMC41NjktMTYuMTk3IDEuODAxLS44MDItNS45NzktMS45NDctNi4wNzMtMy44NDYtLjA4OC0xLjc5NSA0Ljk1OC0yLjA4NCAxMC41MjktNS44NzIgNi4yMTItNC4yMjUgNS42MjktNi4zOTQgMTEuMzM3LTkuNTE0IDEuNjAxLS44NzUgNS41MzgtMS45NzUgMTAuOTMzLTMuMDM4IDkuNzA5LTEuOTE0IDEyLjE0OC00LjI1MyAxNS4zODYtNS44NzIgMi4xODctMS4wOTMgMS44MjMtNC42NTcgMS44MjMtNC42NTdzNy40OTEtMy40NDEgMTYuMzE2LTUuNTI4YzYuNTczLTEuNTU2IDEyLjQzLTguNjQzIDE1LjA2NC0xMC40NjUgMS44MTYtMS4yNTgtNC4yMjMtMi42ODYtNC4wNDktNC4wNS4yNTItMS45ODMgOC4zNzgtLjMwNyAxNC45ODItNS4wNjEgNC4wNzMtMi45MzEgMi42MDktNC43NDIgNi44ODMtNy40OTEgNS4wMjgtMy4yMzIgOC45MTktMS45MzIgMTEuNzQxLTUuNjY4IDEuNDkyLTEuOTc1Ljk2OS0zLjA5IDIuMDIzLTUuMjY1IDIuNDc2LTUuMTAzIDYuODg0LTIuODM0IDE0LjM3NS03Ljg5NXMzMi45OTktMTUuMzg2IDM3LjI1Mi0xOS42MzkgMS4wNTQtMS44NjggMi40My0zLjY0NUM0MjkuODQyIDguOTQgNDQyLjMyOCAwIDQ0Mi4zMjggMGwtMjkuOTEgMjQuNzdzLTEzLjY5NCA5LjY3OC0yNC43NyAxMS4yMTVjLTEuNDA5IDIuMTc1LTIuMzE1IDQuNzE4LTUuNjA4IDguODgtMS41MjUgMS45MjYtNC4zMjIgNS40NjUtOC44NzkgOC44NzktNS4yNDkgMy45MzctOS4xMjggNC45MzMtOC44NzkgNi41NDMuMjczIDEuNzcxIDUuMjAzIDIuMDgxIDUuMTQgMi44MDQtLjA3OS44ODQtNy40MS0uMTQ5LTE0Ljk1NSAxLjg2OC05LjExNyAyLjQ0LTE2LjczNSA4Ljg1Mi0xNS44OTEgMTEuMjE2LjY1IDEuODE2IDQuNjc4IDEuMTA5IDYuNTQzIDEuODY4IDQuMTM1IDEuNjg5LTM5LjQ0OCAxNi44MjYtMzcuMzg4IDIxLjAzbS03NS42NCAxMzUuNTNjLTIuNjUyIDMuODQ2IDExLjkwMi0xMi4zNTIgMTQuNjc4LTE5LjE5IDIuMjMtNS40ODYgMy4yMi0xMC4wMDkgMy41MjQtMTEuNTgzLjA2OS0uMzYxLjMzNi0uNjUyLjY4OS0uNzUzIDIuNjkyLS43NjkgMTQuMDM1LTQuNDM1IDE5LjI4Ny0xMi44NzQgNS41ODEtOC45NjcgMTMuNzY0LTIzLjg4OSAxNC44MzctMjUuODQ4LjA3Ny0uMTQyLjE4OS0uMjYyLjMyNS0uMzVsMTAuODI2LTcuMDE3YS45Ny45NyAwIDAgMSAxLjAxOC0uMDI0bDIuOTEgMS42ODNjLjM3NC4yMTUuODQ4LjE2MSAxLjE2LS4xNGwxOC40ODItMTcuNjcxYy4yNjQtLjI1Mi42NDctLjMzNy45OS0uMjE1bDQuODA2IDEuNjU1YS45Ny45NyAwIDAgMSAuNjMyIDEuMTM5bC0xLjA1NCA0LjU5NGMtLjI0OSAxLjA4NyAxLjIzIDEuNjczIDEuNzg5LjcwNyAyLjg4LTQuOTY2IDcuNTMxLTExLjgyIDEzLjk4Ni0xNy43NjQgMTEuMjI0LTEwLjMzOCAzMS44MDgtMjQuODM3IDMzLjYyNS0yNi4xMTNhLjk2Ljk2IDAgMCAwIC4yMjItLjIxOWw1LjcyLTcuNzY0YS45Ni45NiAwIDAgMCAuMTc2LS40NjhjLjExNS0xLjEwMyAxLjM3OS01Ljg0OCAxNC4wODktMTEuMDgyIDE0LjUyNy01Ljk4MSAxMi4xNzUtNC4wNTggMTIuMTc1LTQuMDU4cy0xMC4yNTUgMC00LjI3MS01Ljc2OWM1LjgyNC01LjYxNCAyMC43ODgtMTUuODg0IDIxLjU4MS0xNi40MjguMDIxLS4wMTUuMDQyLS4wMy4wNjMtLjA0OWwyMS4xMDQtMTcuMTljLjkyMy0uNzUxLS4wNDktMi4xODgtMS4wODgtMS42MDdsLTE4LjE2MyAxMC4yNzktOS43MiA0Ljc1OGMtLjIwOC4xLS4zNzIuMjcxLS40NjIuNDgzbC0yLjExNSA0LjgwNWMtLjA2MS4xMzctLjE1Mi4yNTktLjI2Ny4zNTZsLTkuOTQyIDguMjg3Yy0uMDg5LjA3My0uMTg5LjEzLS4yOTguMTctMi4xNzUuNzY4LTI1LjQxMSA5LjAyNS0yNi4yNzQgMTEuMjY0LS43MzggMS45MTQgMS4xMDYuNzExIDEuODE3LjE5Ny4xNzctLjEyOC4zOTItLjE5NC42MTEtLjE4NWwzLjEyNS4xMjFjLjgxOC4wMzEgMS4yMzQuOTk0LjY5OSAxLjYxMWwtMy4wMzIgMy41MTRjLS4wNDUuMDU1LS4wOTcuMTA0LS4xNTUuMTQ2LS44NDcuNjMyLTcuODU4IDUuODc4LTE0Ljg2OSAxMS42ODYtNC4yODQgMy41NDgtNi44MTQgNS4xMzQtOC4xOTYgNS44NDItLjY0OS4zMzEtMS40MTktLjE0LTEuNDE5LS44NjkgMC0uODQ0LS45OTktMS4yOTEtMS42MjUtLjcyMy02LjQ5OCA1Ljg2OS0zMC40NTEgMjcuMy0zNC42OTEgMjguMjIxbC0xMy4zNDIgMy4wNzRjLS4zMzcuMDc5LS42MDguMzM0LS43MDguNjY1bC0xLjg3MSA2LjE3NmMtLjA2Ny4yMTktLjIwNy40MDctLjM5OC41MzJsLTI1LjU4NCAxNi43NzdhLjk2Ljk2IDAgMCAxLS4zOTIuMTQ5Yy0xLjUxOS4yMjItMTAuODA4IDEuNjU5LTEyLjE4MSAzLjgxNS0uNjgxIDEuMDctMS4xMzkgMi4wMDgtMS40NCAyLjcxLS4yNzEuNjQxLjIwMyAxLjM0OS44OTkgMS4zNDloNS43NmEuOTguOTggMCAwIDEgLjk1NiAxLjE2NmwtLjA5MS40NjJhLjk3Ljk3IDAgMCAxLS41OC43MDhjLTMuODkxIDEuNjE5LTMwLjI3NyAxMi42ODktMzIuODQ3IDE2LjI1Mi0yLjAwOCAyLjc3OS0zLjkwNC4xMjEtNC44LTEuNTY4LS4zMDctLjU4Mi0xLjA5Mi0uNjk5LTEuNTU1LS4yMy0xLjIyMSAxLjIzMy0zLjA1IDMuNTI5LTIuNTI4IDUuODU2LjcwOCAzLjE2LTUuNDQ2IDMuMDM1LTYuMzc5IDIuOTk2LS4wODItLjAwMy0uMTYxLjAwMy0uMjQuMDIxLS45NjYuMjA5IDcuNjI4IDMuMjU5IDQuNjY5IDUuNDMxLTEuODI2IDEuMzQtMTEuNzM1IDYuNzU2LTE0LjQ2IDYuMzQ2LTEuMDcyLS4xNjEtOS4wMjUgNy4wMDItOC4wNzQgNy41MjIgMi4wNTEgMS4xMjcgOC40NzIgNi4xODUgMTMuNCA1LjkwNW0xODkuNDk1LTgyLjMxNHMtMTQuODkxIDcuMjYzLTE1Ljk2IDQuNDg3IDEuMDY5IDIuNzc2IDEuMDY5IDIuNzc2LTE3LjA5MSA4Ljk3NC0yMC4yOTUgMTIuNjA0LTE5LjQzOSAxMS45NjMtMTkuNDM5IDExLjk2MyA0LjY5OSA2LjYyMi00LjkxMiA3LjQ3Ni05LjgyNyAyLjM1MS05LjgyNyAyLjM1MWwtOC45NzQgNC42OTlzMi43NzcgMi43NzctMTAuNjgxIDguOTc0LTE2LjAyMSA1Ljc2OC0xNi4wMjEgNS43NjgtMS40OTQgNi40MS00LjkxMiA4LjMzMy05LjgyNyA2LjYyMi0xMi4zOTEgNi4xOTQtNi44MzUgNS4xOTItNi44MzUgNS4xOTIgNC4wNTkgMi4wNzEgMS4wNyA0LjIwNy03LjI2NCA3LjkwNC03LjI2NCA3LjkwNGwtMy40MTcgMi4xMzZ2OC43NDhsLTMuMjA1IDMuNjQzcy4yMTMtOC44MTktMS45MjMtOC42ODItMTUuMzggNS4wMzktMTUuMzggNS4wMzlsMS41MDcgMy42NDNzLTQuOTg1IDcuMTg3LTUuMTk4IDguODk3IDIuOTQxIDkuMDc0IDIuOTQxIDkuMDc0bC0xLjk3OCAxNy4xNnMxMC41NjUtMjIuNDc5IDE2Ljk3NS0yNi43NSAxMy41MjctOS40NDUgMTUuNjYzLTkuNjYgMTAuNDY4LTguNTQ1IDEwLjQ2OC04LjU0NWwxNC4wOTgtMTYuODExcy04Ljc1OCA2LjM0Mi0xMC40NjggNC42MzUgMTUuODA4LTE1LjE2NyAxNS44MDgtMTUuMTY3IDI0Ljc4Mi00LjQ4NyAzMC41NDgtMTEuMTA5IDUuNzY5LTkuMzk5IDUuNzY5LTkuMzk5IDcuNDc2LjIxMiA4Ljk3My0yLjEzNiA4Ljc1OC03LjA1IDguNzU4LTcuMDVsNC40ODctOS42MTVzOC41NDUtNi40MSAxMi42MDQtNi42MjIgNy4wNS01LjU1MyA3LjA1LTUuNTUzLTguMTE3IDIuOTkyLTkuMzk5IDIuNTY0IDExLjc1LTcuNjkyIDExLjc1LTcuNjkybDE4Ljk1My0xMy42NzMtLjAxMi0uMDAzeiIvPjwvc3ZnPg==
    mediatype: image/svg+xml
  install:
    spec:
      deployments: null
    strategy: ""
  installModes:
  - supported: false
    type: OwnNamespace
  - supported: false
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
  - raptor
  - feature engineering
  - feature store
  - kubeflow
  - serverless
  - platform
  - machine learning
  - ML
  - DS
  - data science
  links:
  - name: Raptor
    url: https://raptor.ml
  maintainers:
  - email: almog.baku@gmail.com
    name: Almog Baku
  maturity: alpha
  minKubeVersion: 1.18.0
  provider:
    name: Raptor
    url: https://raptor.ml
  version: 0.0.0
