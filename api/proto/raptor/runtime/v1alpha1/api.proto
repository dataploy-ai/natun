syntax = "proto3";

package raptor.runtime.v1alpha1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "raptor/core/v1alpha1/types.proto";
import "validate/validate.proto";

option go_package = "github.com/raptor-ml/raptor/core/v1alpha1;coreV1alpha1";

// +++  SideEffects +++
message SideEffects {
    string kind = 1;
    map<string, string> args = 2;
    bool conditional = 3;
}

// +++ Read methods +++

message ExecuteProgramRequest {
    string uuid = 1 [(validate.rules).string.uuid = true];
    string fqn = 2 [(validate.rules).string.pattern = "(i?)^([a0-z9\\-\\.]*)(\\[([a0-z9])*\\])?$"];
    map<string, string> keys = 3;
    map<string, raptor.core.v1alpha1.Value> data = 4;
    google.protobuf.Timestamp timestamp = 5;
}
message ExecuteProgramResponse {
    string uuid = 1 [(validate.rules).string.uuid = true];
    raptor.core.v1alpha1.Value result = 2;
}
message LoadProgramRequest {
    string uuid = 1 [(validate.rules).string.uuid = true];
    string fqn = 2 [(validate.rules).string.pattern = "(i?)^([a0-z9\\-\\.]*)(\\[([a0-z9])*\\])?$"];
    string program = 3;
}
message LoadProgramResponse {
    enum PrimitiveType {
        STRING = 0;
        INT = 1;
        FLOAT = 2;
        TIMESTAMP = 3;
        BOOL = 4;
        STRING_LIST = 5;
        INT_LIST = 6;
        FLOAT_LIST = 7;
        TIMESTAMP_LIST = 8;
        BOOL_LIST = 9;
    }
    string uuid = 1 [(validate.rules).string.uuid = true];

}
message RegisterSchemaRequest {
    string uuid = 1 [(validate.rules).string.uuid = true];
    string schema = 2 [(validate.rules).string.uri = true];
}
message RegisterSchemaResponse {
    string uuid = 1 [(validate.rules).string.uuid = true];
}

// +++ Service +++
service RuntimeService {
    rpc LoadProgram (LoadProgramRequest) returns (LoadProgramResponse) {
        option (google.api.http) = {
            post: "/program"
            body: "*"
        };
    }
    rpc RegisterSchema (RegisterSchemaRequest) returns (RegisterSchemaResponse) {
        option (google.api.http) = {
            post: "/schema"
            body: "*"
        };
    }
    rpc ExecuteProgram (ExecuteProgramRequest) returns (ExecuteProgramResponse) {
        option (google.api.http) = {
            post: "/program/{fqn}"
            body: "*"
        };
    }
}